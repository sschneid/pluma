pluma installation


1. View and edit pluma.cfg
------------------------------

pluma reads in most of it's configuration directives through a flat text configruation file (pluma.cfg).  This file must be in the located in the base of pluma's application directory.

* Format for a single-value option is:

    $variable: "value"

* Format for a multi-value option is:

    @variable: "option1 option2 option3"

* LDAP server information

    - $ldap.Server is the FQDN of the LDAP server
    - $ldap.SSL turns SSL on (1) or off (0)

    - Example:

        $ldap.Server "ldap.company.com"
        $ldap.SSL: "1"

* LDAP OU set-up

    - The base OUs for users, hosts, and groups must all be set-up within the configuration file.

    - Example:

        $ldap.Base: "dc=company,dc=com"
        $ldap.Base.User: "ou=People,$ldap.Base"
        $ldap.Base.Host: "ou=Hosts,$ldap.Base"
        $ldap.Base.Group: "ou=Groups,$ldap.Base"

    - If users exist in multiple bases, this is configurable as well.  For display purposes, a prefix can be set to be excluded from selection lists.  If ldap.Base.User is left blank, pluma will search ldap.Base for and use all OUs containing user objects.

    - Example:

        @ldap.Base.User: "ou=People,dc=hq,$ldap.Base ou=People,dc=field,$ldap.Base"
        $prefix.Base.User: "ou=People,dc="

* LDAP bind account

    - An LDAP account with sufficient read/write access to the user, host, and group OUs must be set-up and specified.

    - Example:

        $auth.BindDN: "uid=pluma,$ldap.Base.User"
        $auth.Password: "plum4p455w0rd!"

* Password encryption

    - Valid userPassword encryptions options are "crypt" (the default), "sha", and "ssha".  Digest::SHA1 and MIME::Base64 are required for SHA/SSHA.

    - Example:

        $pw.Encrypt: "crypt"

* Audit logging

    - All modification actions can be written to an audit log.  Make sure that the webserver user has access to write to this file.

    - Example:

        $audit.log: "/var/log/httpd/pluma-audit_log"

* Identifying users & groups in the directory

    - These options allow pluma to identify a user or group only if it belongs to a specified LDAP object class.
    - Additionally, a key can be used to identify a unique user.  'uid' is the default.

    - Example:

        $user.objectClass: "companyDotComUser"
        $group.objectClass: "companyDotComGroup"
        $user.uniqueID: "uid"

* Configurable user options

    - These options allow for setting different configurable options for users (such as a choice of login shells).

    - Example:

        @shells: "/bin/bash /bin/ksh"

* New user defaults

    - GID ($default.GID), loginShell ($default.Shell), mail format ($mail.Format), homeDirectory prefix ($prefix.Home), and OU inclusion (@user.objectClass) can be set.  Defaults are used if values are not set.
    - If not creating POSIX users set user.POSIX to "0".  Note that only uid, cn, givenName, sn, mail, and userPassword are allowed for non-POSIX users.
    - $user.generatePassword determines whether a randomized password is generated during account creation.
    - Valid variables in $mail.Format are '%givenName', '%sn', and '%uid'.

    - Example:

        $user.POSIX: "1"
        $prefix.Home: "/home"
        $default.Shell: "/bin/false"
        $default.GID: "100"
        $user.generatePassword: "1"
        $mail.Format: "%uid@company.com"

* Welcome letter

    - If enabled, a "welcome letter" containing the username and randomized password can be emailed to a user at the time of account creation.

    - Example:

        $mail.WelcomeLetter: "0"
        $mail.WelcomeLetter.from: "noreply@company.com"
        $mail.WelcomeLetter.subject: "Welcome to CompanyDotCom!"

* Internal LDAP limits

    - Limits can be set to help alleviate server congestion.

    - Example:

        $fetch.Limit.Size: 1000
        $fetch.Limit.Time: 30



2. Apache set-up
----------------

Web set-up should be relatively simple.  Full Apache set-up is outside of the scope of this installation document.

* AuthLDAP is required for Apache set-up.

    - Example:

        <Directory /var/www/pluma>
            Options ExecCGI FollowSymLinks

            AllowOverride None

            AddHandler cgi-script .cgi
            DirectoryIndex index.cgi

            AuthType Basic
            AuthName "pluma"

            AuthLDAPEnabled on
            AuthLDAPAuthoritative on
            AuthLDAPURL ldaps://ldap.company.com/dc=company,dc=com?uid

            # Only members of the sysadm group get access
            Require group cn=sysadm,ou=Groups,dc=company,dc=com

            Order allow,deny
            Allow from all
        </Directory>

* pluma runs great under mod_perl.  Because mod_perl doesn't support relative paths, however, a few changes are necessary.  The instructions below suppose that you have pluma installed in /var/www/pluma/.

    - index.cgi: 

        The full path to the pluma libraries must be specified in the BEGIN statement.

            BEGIN { unshift @INC, '/var/www/pluma/lib'; }

    - lib/pluma.pm:

        The full path to the configuration file must be specified.

            $self->{'config'} = $self->{'util'}->readConfig(
                configFile => '/var/www/pluma/pluma.cfg'
            )
            || die qq(Error reading configuration file pluma.cfg\n);

    - lib/pluma/Util.pm:

        HTML::Template needs the full path to template files.  Change all of the instance of 'thtml/' to a fully-qualified path.

            my $template = $self->load_tmpl(
                '/var/www/pluma/thtml/' . $arg->{'container'} . '.thtml',
                die_on_bad_params => 0,
                cache => 1
            );

